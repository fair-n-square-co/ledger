// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLedger = `-- name: GetLedger :one
SELECT id, user_id, direction, amount_currency_code, amount_units, amount_nanos, transaction_id, created_at, updated_at FROM ledger
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLedger(ctx context.Context, id pgtype.UUID) (Ledger, error) {
	row := q.db.QueryRow(ctx, getLedger, id)
	var i Ledger
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Direction,
		&i.AmountCurrencyCode,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT transaction.id, last_updating_user, type, transaction.created_at, transaction.updated_at, ledger.id, user_id, direction, amount_currency_code, amount_units, amount_nanos, transaction_id, ledger.created_at, ledger.updated_at FROM transaction
JOIN ledger ON transaction.id = ledger.transaction_id
WHERE transaction.id = $1 LIMIT 1
`

type GetTransactionRow struct {
	ID                 pgtype.UUID
	LastUpdatingUser   pgtype.UUID
	Type               NullTransactionType
	CreatedAt          pgtype.Timestamptz
	UpdatedAt          pgtype.Timestamptz
	ID_2               pgtype.UUID
	UserID             pgtype.UUID
	Direction          NullLedgerDirection
	AmountCurrencyCode string
	AmountUnits        int64
	AmountNanos        int32
	TransactionID      pgtype.UUID
	CreatedAt_2        pgtype.Timestamptz
	UpdatedAt_2        pgtype.Timestamptz
}

func (q *Queries) GetTransaction(ctx context.Context, id pgtype.UUID) (GetTransactionRow, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i GetTransactionRow
	err := row.Scan(
		&i.ID,
		&i.LastUpdatingUser,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.UserID,
		&i.Direction,
		&i.AmountCurrencyCode,
		&i.AmountUnits,
		&i.AmountNanos,
		&i.TransactionID,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}
